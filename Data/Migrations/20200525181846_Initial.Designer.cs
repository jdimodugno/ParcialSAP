// <auto-generated />
using System;
using Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(BankDbContext))]
    [Migration("20200525181846_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.BankAccount", b =>
                {
                    b.Property<Guid>("Number")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<double>("Overdraft")
                        .HasColumnType("float");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Number");

                    b.ToTable("BankAccount");

                    b.HasData(
                        new
                        {
                            Number = new Guid("e34db995-bd5b-45f3-a85b-7e5ccfc5bfeb"),
                            DateCreated = new DateTime(2020, 5, 25, 15, 18, 46, 270, DateTimeKind.Local).AddTicks(1900),
                            Overdraft = 0.0,
                            Type = 0
                        },
                        new
                        {
                            Number = new Guid("b0979f9d-1c73-42c5-aeea-1740076bf5ab"),
                            DateCreated = new DateTime(2020, 5, 25, 15, 18, 46, 281, DateTimeKind.Local).AddTicks(5050),
                            Overdraft = 0.0,
                            Type = 0
                        },
                        new
                        {
                            Number = new Guid("787a369f-e48f-4e92-b760-5a9c919dcacf"),
                            DateCreated = new DateTime(2020, 5, 25, 15, 18, 46, 281, DateTimeKind.Local).AddTicks(5080),
                            Overdraft = 0.0,
                            Type = 0
                        },
                        new
                        {
                            Number = new Guid("df5ef595-d9d4-47a2-9962-fb69c06d9c78"),
                            DateCreated = new DateTime(2020, 5, 25, 15, 18, 46, 281, DateTimeKind.Local).AddTicks(5080),
                            Overdraft = 2000.0,
                            Type = 1
                        },
                        new
                        {
                            Number = new Guid("9d31da51-44a7-4737-8b3c-0675644f9ff3"),
                            DateCreated = new DateTime(2020, 5, 25, 15, 18, 46, 281, DateTimeKind.Local).AddTicks(5090),
                            Overdraft = 1000.0,
                            Type = 1
                        },
                        new
                        {
                            Number = new Guid("5aad84d1-f9f4-4815-8bbd-cd543ea2e3e3"),
                            DateCreated = new DateTime(2020, 5, 25, 15, 18, 46, 281, DateTimeKind.Local).AddTicks(5090),
                            Overdraft = 750.0,
                            Type = 1
                        });
                });

            modelBuilder.Entity("Domain.Models.Deposit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TargetAccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TargetAccountId");

                    b.ToTable("Deposit");
                });

            modelBuilder.Entity("Domain.Models.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SourceAccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TargetAccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SourceAccountId");

                    b.HasIndex("TargetAccountId");

                    b.ToTable("Transfer");
                });

            modelBuilder.Entity("Domain.Models.Withdrawal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("TargetAccountId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TargetAccountId");

                    b.ToTable("Withdrawal");
                });

            modelBuilder.Entity("Domain.Models.Deposit", b =>
                {
                    b.HasOne("Domain.Models.BankAccount", "TargetAccount")
                        .WithMany("Deposits")
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Transfer", b =>
                {
                    b.HasOne("Domain.Models.BankAccount", "SourceAccount")
                        .WithMany("TransfersAsSource")
                        .HasForeignKey("SourceAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Models.BankAccount", "TargetAccount")
                        .WithMany("TransfersAsTarget")
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Models.Withdrawal", b =>
                {
                    b.HasOne("Domain.Models.BankAccount", "TargetAccount")
                        .WithMany("Withdrawals")
                        .HasForeignKey("TargetAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
